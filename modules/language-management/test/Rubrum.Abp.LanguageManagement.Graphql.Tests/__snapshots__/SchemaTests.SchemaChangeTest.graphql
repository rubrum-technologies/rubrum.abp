schema {
  query: Query
  mutation: Mutation
}

"This interface can be implemented to store creation information (who and when created)."
interface CreationAuditedObject implements HasCreationTime & MayHaveCreator {
  creationTime: DateTime
  creatorId: ID
}

"This interface can be implemented to store deletion information (who delete and when deleted)."
interface DeletionAuditedObject implements HasDeletionTime & SoftDelete {
  deleterId: ID
  deletionTime: DateTime
  isDeleted: Boolean
}

interface EntityOfString {
  id: ID!
}

interface Error {
  message: String!
}

"A standard interface to add CreationTime property."
interface HasCreationTime {
  creationTime: DateTime
}

"A standard interface to add DeletionTime property to a class. It also makes the class soft delete (see ISoftDelete)."
interface HasDeletionTime implements SoftDelete {
  deletionTime: DateTime
  isDeleted: Boolean
}

"A standard interface to add DeletionTime property to a class."
interface HasModificationTime {
  lastModificationTime: DateTime
}

interface IHasExtraProperties {
  extraProperties: JSON
}

"Standard interface for an entity that MAY have a creator."
interface MayHaveCreator {
  creatorId: ID
}

"This interface can be implemented to store modification information (who and when modified lastly)."
interface ModificationAuditedObject implements HasModificationTime {
  lastModifierId: ID
  lastModificationTime: DateTime
}

"The node interface is implemented by entities that have a global unique identifier."
interface Node {
  id: ID!
}

" Used to standardize soft deleting entities. Soft-delete entities are not actually deleted, marked as IsDeleted = true in the database, but can not be retrieved to the application normally."
interface SoftDelete {
  isDeleted: Boolean
}

type BusinessError implements Error {
  code: String
  details: String
  message: String!
}

type CreateSystemLanguagePayload {
  systemLanguage: SystemLanguage
  errors: [CreateSystemLanguageError!]
}

type DeleteSystemLanguagePayload {
  systemLanguage: SystemLanguage
  errors: [DeleteSystemLanguageError!]
}

type EntityNotFoundError implements Error {
  id: String
  type: String
  message: String!
}

type Mutation {
  createSystemLanguage(input: CreateSystemLanguageInput!): CreateSystemLanguagePayload!
  updateSystemLanguage(input: UpdateSystemLanguageInput!): UpdateSystemLanguagePayload!
  deleteSystemLanguage(input: DeleteSystemLanguageInput!): DeleteSystemLanguagePayload!
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

type Query {
  "Fetches an object given its ID."
  node("ID of the object." id: ID!): Node
  "Lookup nodes by a list of IDs."
  nodes("The list of node IDs." ids: [ID!]!): [Node]!
  systemLanguageById(id: ID): SystemLanguage!
  systemLanguage(where: SystemLanguageFilterInput): SystemLanguage
  systemLanguages("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: SystemLanguageFilterInput order: [SystemLanguageSortInput!]): SystemLanguagesConnection
  systemLanguagesAll(where: SystemLanguageFilterInput order: [SystemLanguageSortInput!]): [SystemLanguage!]!
  systemLanguagesAny(where: SystemLanguageFilterInput): Boolean!
  systemLanguagesCount(where: SystemLanguageFilterInput): Int!
}

type SystemLanguage implements EntityOfString & Node & IHasExtraProperties & MayHaveCreator & HasCreationTime & CreationAuditedObject & HasModificationTime & ModificationAuditedObject & SoftDelete & HasDeletionTime & DeletionAuditedObject {
  id: ID!
  extraProperties: JSON
  creatorId: ID
  creationTime: DateTime
  lastModificationTime: DateTime
  lastModifierId: ID
  isDeleted: Boolean!
  deletionTime: DateTime
  deleterId: ID
  code: String!
  name: String!
}

"A connection to a list of items."
type SystemLanguagesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [SystemLanguagesEdge!]
  "A flattened list of the nodes."
  nodes: [SystemLanguage!]
}

"An edge in a connection."
type SystemLanguagesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: SystemLanguage!
}

type UpdateSystemLanguagePayload {
  systemLanguage: SystemLanguage
  errors: [UpdateSystemLanguageError!]
}

type ValidationError implements Error {
  message: String!
  results: [ValidationResult!]!
}

type ValidationResult {
  errorMessage: String
}

union CreateSystemLanguageError = ValidationError | BusinessError | EntityNotFoundError

union DeleteSystemLanguageError = ValidationError | BusinessError | EntityNotFoundError

union UpdateSystemLanguageError = ValidationError | BusinessError | EntityNotFoundError

input BooleanOperationFilterInput {
  eq: Boolean
  neq: Boolean
}

input ComparableDateTimeOperationFilterInput {
  eq: DateTime
  neq: DateTime
  in: [DateTime!]
  nin: [DateTime!]
  gt: DateTime
  ngt: DateTime
  gte: DateTime
  ngte: DateTime
  lt: DateTime
  nlt: DateTime
  lte: DateTime
  nlte: DateTime
}

input CreateSystemLanguageInput {
  "Maximum length '5',\nRequired and not empty"
  code: String!
  "Maximum length '30',\nRequired and not empty"
  name: String!
}

input DateOnlyOperationFilterInput {
  and: [DateOnlyOperationFilterInput!]
  or: [DateOnlyOperationFilterInput!]
  eq: Date
  neq: Date
  in: [Date!]
  nin: [Date!]
  gt: Date
  ngt: Date
  gte: Date
  ngte: Date
  lt: Date
  nlt: Date
  lte: Date
  nlte: Date
}

input DateTimeOperationFilterInput {
  eq: DateTime
  neq: DateTime
  in: [DateTime]
  nin: [DateTime]
  gt: DateTime
  ngt: DateTime
  gte: DateTime
  ngte: DateTime
  lt: DateTime
  nlt: DateTime
  lte: DateTime
  nlte: DateTime
}

input DeleteSystemLanguageInput {
  id: ID!
}

input IdOperationFilterInput {
  eq: ID
  neq: ID
  in: [ID]
  nin: [ID]
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

input SystemLanguageFilterInput {
  and: [SystemLanguageFilterInput!]
  or: [SystemLanguageFilterInput!]
  id: IdOperationFilterInput
  creatorId: IdOperationFilterInput
  creationTime: ComparableDateTimeOperationFilterInput
  lastModificationTime: ComparableDateTimeOperationFilterInput
  lastModifierId: IdOperationFilterInput
  deleterId: IdOperationFilterInput
  name: StringOperationFilterInput
  isDeleted: BooleanOperationFilterInput
  deletionTime: DateTimeOperationFilterInput
  creationDate: DateOnlyOperationFilterInput
  lastModificationDate: DateOnlyOperationFilterInput
}

input SystemLanguageSortInput {
  id: SortEnumType
  creatorId: SortEnumType
  creationTime: SortEnumType
  lastModificationTime: SortEnumType
  lastModifierId: SortEnumType
  isDeleted: SortEnumType
  deletionTime: SortEnumType
  deleterId: SortEnumType
  name: SortEnumType
}

input UpdateSystemLanguageInput {
  id: ID!
  "Maximum length '30',\nRequired and not empty"
  name: String!
}

enum ApplyPolicy {
  BEFORE_RESOLVER
  AFTER_RESOLVER
  VALIDATION
}

enum SortEnumType {
  ASC
  DESC
}

directive @allowAnonymous repeatable on FIELD_DEFINITION

directive @authorize("The name of the authorization policy that determines access to the annotated resource." policy: String "Roles that are allowed to access the annotated resource." roles: [String!] "Defines when when the authorize directive shall be applied.By default the authorize directives are applied during the validation phase." apply: ApplyPolicy! = BEFORE_RESOLVER) repeatable on OBJECT | FIELD_DEFINITION

"The `@specifiedBy` directive is used within the type system definition language to provide a URL for specifying the behavior of custom scalar definitions."
directive @specifiedBy("The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types." url: String!) on SCALAR

"The `Date` scalar represents an ISO-8601 compliant date type."
scalar Date

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime @specifiedBy(url: "https:\/\/www.graphql-scalars.com\/date-time")

scalar JSON