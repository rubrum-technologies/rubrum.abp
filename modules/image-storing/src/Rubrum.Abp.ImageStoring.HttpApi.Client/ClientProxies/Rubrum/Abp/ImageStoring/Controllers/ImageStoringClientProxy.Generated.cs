// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using Rubrum.Abp.ImageStoring;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Volo.Abp;
using Volo.Abp.Application.Dtos;
using Volo.Abp.Content;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Client.ClientProxying;
using Volo.Abp.Http.Modeling;

// ReSharper disable once CheckNamespace
namespace Rubrum.Abp.ImageStoring.Controllers;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(IImageStoringAppService), typeof(ImageStoringClientProxy))]
public partial class ImageStoringClientProxy : ClientProxyBase<IImageStoringAppService>, IImageStoringAppService
{
    public virtual async Task<ImageInformationDto> GetAsync(Guid id)
    {
        return await RequestAsync<ImageInformationDto>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<ListResultDto<ImageInformationDto>> GetByTagAsync(string tag)
    {
        return await RequestAsync<ListResultDto<ImageInformationDto>>(nameof(GetByTagAsync), new ClientProxyRequestTypeValue
        {
            { typeof(string), tag }
        });
    }

    public virtual async Task<ListResultDto<ImageInformationDto>> GetListAsync()
    {
        return await RequestAsync<ListResultDto<ImageInformationDto>>(nameof(GetListAsync));
    }

    public virtual async Task<IRemoteStreamContent> DownloadAsync(Guid id)
    {
        return await RequestAsync<IRemoteStreamContent>(nameof(DownloadAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task UploadAsync(Guid id, IRemoteStreamContent file)
    {
        await RequestAsync(nameof(UploadAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(IRemoteStreamContent), file }
        });
    }

    public virtual async Task<ImageInformationDto> UploadAsync(UploadImageInput input)
    {
        return await RequestAsync<ImageInformationDto>(nameof(UploadAsync), new ClientProxyRequestTypeValue
        {
            { typeof(UploadImageInput), input }
        });
    }

    public virtual async Task<ListResultDto<ImageInformationDto>> UploadManyAsync(UploadImagesInput input)
    {
        return await RequestAsync<ListResultDto<ImageInformationDto>>(nameof(UploadManyAsync), new ClientProxyRequestTypeValue
        {
            { typeof(UploadImagesInput), input }
        });
    }

    public virtual async Task ChangeTagAsync(ChangeTagInput input)
    {
        await RequestAsync(nameof(ChangeTagAsync), new ClientProxyRequestTypeValue
        {
            { typeof(ChangeTagInput), input }
        });
    }

    public virtual async Task DeleteAsync(Guid id)
    {
        await RequestAsync(nameof(DeleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task DeleteByTagAsync(string tag)
    {
        await RequestAsync(nameof(DeleteByTagAsync), new ClientProxyRequestTypeValue
        {
            { typeof(string), tag }
        });
    }
}
