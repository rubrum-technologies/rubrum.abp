schema {
  query: Query
  mutation: Mutation
}

"This interface can be implemented to store creation information (who and when created)."
interface CreationAuditedObject implements HasCreationTime & MayHaveCreator {
  creationTime: DateTime
  creatorId: ID
}

"This interface can be implemented to store deletion information (who delete and when deleted)."
interface DeletionAuditedObject implements HasDeletionTime & SoftDelete {
  deleterId: ID
  deletionTime: DateTime
  isDeleted: Boolean
}

interface EntityOfGuid {
  id: ID!
}

interface Error {
  message: String!
}

"A standard interface to add CreationTime property."
interface HasCreationTime {
  creationTime: DateTime
}

"A standard interface to add DeletionTime property to a class. It also makes the class soft delete (see ISoftDelete)."
interface HasDeletionTime implements SoftDelete {
  deletionTime: DateTime
  isDeleted: Boolean
}

"A standard interface to add DeletionTime property to a class."
interface HasModificationTime {
  lastModificationTime: DateTime
}

interface IHasExtraProperties {
  extraProperties: JSON
}

"Standard interface for an entity that MAY have a creator."
interface MayHaveCreator {
  creatorId: ID
}

"This interface can be implemented to store modification information (who and when modified lastly)."
interface ModificationAuditedObject implements HasModificationTime {
  lastModifierId: ID
  lastModificationTime: DateTime
}

"The node interface is implemented by entities that have a global unique identifier."
interface Node {
  id: ID!
}

" Used to standardize soft deleting entities. Soft-delete entities are not actually deleted, marked as IsDeleted = true in the database, but can not be retrieved to the application normally."
interface SoftDelete {
  isDeleted: Boolean
}

type BusinessError implements Error {
  code: String
  details: String
  message: String!
}

type DeleteImagePayload {
  imageInformation: ImageInformation
  errors: [DeleteImageError!]
}

type EntityNotFoundError implements Error {
  id: String
  type: String
  message: String!
}

type ImageInformation implements EntityOfGuid & Node & MayHaveCreator & HasCreationTime & CreationAuditedObject & HasModificationTime & ModificationAuditedObject & SoftDelete & HasDeletionTime & DeletionAuditedObject & IHasExtraProperties {
  id: ID!
  creatorId: ID
  creationTime: DateTime
  lastModificationTime: DateTime
  lastModifierId: ID
  isDeleted: Boolean!
  deletionTime: DateTime
  deleterId: ID
  extraProperties: JSON
  url: String!
  tag: String
  fileName: String
  systemFileName: String!
  isDisposable: Boolean!
  entityVersion: Int!
}

type Mutation {
  deleteImage(input: DeleteImageInput!): DeleteImagePayload!
}

type Query {
  "Fetches an object given its ID."
  node("ID of the object." id: ID!): Node
  "Lookup nodes by a list of IDs."
  nodes("The list of node IDs." ids: [ID!]!): [Node]!
}

type ValidationError implements Error {
  message: String!
  results: [ValidationResult!]!
}

type ValidationResult {
  errorMessage: String
}

union DeleteImageError = ValidationError | BusinessError | EntityNotFoundError

input DateOnlyOperationFilterInput {
  and: [DateOnlyOperationFilterInput!]
  or: [DateOnlyOperationFilterInput!]
  eq: Date
  neq: Date
  in: [Date!]
  nin: [Date!]
  gt: Date
  ngt: Date
  gte: Date
  ngte: Date
  lt: Date
  nlt: Date
  lte: Date
  nlte: Date
}

input DeleteImageInput {
  id: ID!
}

enum ApplyPolicy {
  BEFORE_RESOLVER
  AFTER_RESOLVER
  VALIDATION
}

"The `Date` scalar represents an ISO-8601 compliant date type."
scalar Date

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime @specifiedBy(url: "https:\/\/www.graphql-scalars.com\/date-time")

scalar JSON